# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-04 17:52
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('games', '0001_initial'),
        ('leagues', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_date', models.DateTimeField(blank=True, null=True)),
                ('child_num', models.IntegerField(default=1)),
                ('final', models.BooleanField(default=False)),
                ('witness_id', models.CharField(max_length=50, null=True)),
                ('creation_datetime', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=30, null=True)),
                ('event_type', models.IntegerField(choices=[(1, 'showdown'), (2, 'series'), (3, 'tournament'), (4, 'season'), (5, 'olympics')])),
                ('comp_type', models.IntegerField(choices=[(1, 'individual'), (2, 'team')])),
                ('num_children', models.IntegerField(default=1)),
                ('child_num', models.IntegerField(null=True)),
                ('final', models.BooleanField(default=False)),
                ('creation_datetime', models.DateTimeField(auto_now_add=True)),
                ('game_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='games.GameType')),
                ('league', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='leagues.League')),
                ('parent_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.GameEvent')),
            ],
        ),
        migrations.CreateModel(
            name='Matchup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependent_type', models.IntegerField(choices=[(1, 'winner'), (2, 'loser'), (3, 'series')], null=True)),
                ('game_on', models.BooleanField(default=False)),
                ('place', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('seed', models.IntegerField(null=True)),
                ('competitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dependent_game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.Game')),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_type', models.IntegerField(choices=[(1, 'round robin'), (2, 'input')])),
                ('season_games', models.IntegerField()),
                ('season_playoffs', models.BooleanField(default=False)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matchups.GameEvent')),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_type', models.IntegerField(choices=[(1, 'best of'), (2, 'first to'), (3, 'play all')])),
                ('series_games', models.IntegerField()),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matchups.GameEvent')),
            ],
        ),
        migrations.CreateModel(
            name='SubTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchups.Game')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leagues.LeagueMember')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leagues.Team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMatchup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependent_type', models.IntegerField(choices=[(1, 'winner'), (2, 'loser'), (3, 'series')])),
                ('game_on', models.BooleanField(default=False)),
                ('place', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('seed', models.IntegerField()),
                ('competitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leagues.Team')),
                ('dependent_game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.Game')),
                ('dependent_series', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.Series')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamgame', to='matchups.Game')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tourney_type', models.IntegerField(choices=[(1, 'single elimination'), (2, 'double elimination'), (3, 'series best of')])),
                ('tourney_seeds', models.IntegerField(choices=[(1, 'random'), (2, 'assigned')])),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matchups.GameEvent')),
            ],
        ),
        migrations.CreateModel(
            name='TourneyRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_type', models.IntegerField(choices=[(1, 'winner'), (2, 'loser')])),
                ('round_num', models.IntegerField()),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchups.Tournament')),
            ],
        ),
        migrations.AddField(
            model_name='series',
            name='tourney_round',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.TourneyRound'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='dependent_series',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.Series'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game', to='matchups.Game'),
        ),
        migrations.AddField(
            model_name='game',
            name='competitors',
            field=models.ManyToManyField(through='matchups.Matchup', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='game',
            name='game_venue',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='games.GameVenue'),
        ),
        migrations.AddField(
            model_name='game',
            name='parent_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchups.GameEvent'),
        ),
        migrations.AddField(
            model_name='game',
            name='teams',
            field=models.ManyToManyField(through='matchups.TeamMatchup', to='leagues.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='tourney_round',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='matchups.TourneyRound'),
        ),
        migrations.AlterUniqueTogether(
            name='tourneyround',
            unique_together=set([('tournament', 'round_type', 'round_num')]),
        ),
        migrations.AlterUniqueTogether(
            name='teammatchup',
            unique_together=set([('game', 'competitor', 'dependent_game', 'dependent_series')]),
        ),
        migrations.AlterUniqueTogether(
            name='subteam',
            unique_together=set([('game', 'member')]),
        ),
        migrations.AlterUniqueTogether(
            name='matchup',
            unique_together=set([('game', 'competitor', 'dependent_game', 'dependent_series')]),
        ),
    ]
